/*

  Version: 3.6
  Terms: https://iframe.chat/tos.html

  Warning: Creating scripts that spam the server with requests will
  automatically IP ban you from accessing Chattable for a set amount
  of time. Do not engage in malicious activities. Under no
  circumstance will this be undone or waived.

*/
var chattable = {
  settings : {
    visible : true,
    theme : false
  },
  returnFrame : function(){
    var frame = document.getElementById('chattable');;
    if(frame){
      return frame;
    } else {
      console.warn("No Chattable interface was detected on your page. Your iframe's id must be set to 'chattable' to use Chattable.");
      return null;
    }
  },
  loadStyle : function(source){
    var src = new XMLHttpRequest();
    src.open("GET", source, true);
    src.responseType = "text";
    src.onload = function(){
      if(src.readyState === src.DONE){
        if(src.status === 200){
          var ChatUI = chattable.returnFrame();
          src = src.response;
          if(ChatUI){
            window.chattableStylesheet = src;
            ChatUI.addEventListener("load", function(){
              ChatUI.contentWindow.postMessage(window.chattableStylesheet, "*");
            });
            try {
              ChatUI.contentWindow.postMessage(window.chattableStylesheet, "*");
            } catch(err){
              console.warn("The current web page is loading slower than the iframe, but that's okay.");
            }
          } else {
            console.warn("Unable to load CSS onto live chat, the iframe is not ready yet or does not exist.");
          }
          
        } else {
          console.error("Could not locate file. Check the link and try again. " + parameters.stylesheet + ";" + src.status);
          return false;
        }
      }
    };
    src.send(null);
  },
  initialize : function(parameters){
    // console.clear();
    if(parameters){
      if(parameters.stylesheet){
        chattable.loadStyle(parameters.stylesheet);
      }
      if(parameters.theme){
        var themes = {
          "hacker terminal" : "https://iframe.chat/demo/hacker.css",
          "amber" : "https://iframe.chat/demo/amber.css",
          "comment section" : "https://iframe.chat/demo/comment.css",
          "confidential" : "https://iframe.chat/demo/confidential.css",
          "notepad" : "https://iframe.chat/demo/notepad.css",
          "pastel pink" : "https://iframe.chat/demo/pastel.css",
          "moderno" : "https://iframe.chat/demo/moderno.css",
          "retrowave red" : "https://iframe.chat/demo/red.css",
          "windows xp" : "https://iframe.chat/demo/xp.css",
          "kick" : "https://iframe.chat/demo/kick.css",
          
        };
        if(themes[parameters.theme.toLowerCase()]){
          chattable.loadStyle(themes[parameters.theme.toLowerCase()]);
        }
      }
    }
  },
  reintitialize : function(parameters){
    var ChatUI = chattable.returnFrame();
    if(parameters){
      if(parameters.stylesheet){
        var src = new XMLHttpRequest();
        src.open("GET", parameters.stylesheet, true);
        src.responseType = "text";
        src.onload = function(){
          if(src.readyState === src.DONE){
            if(src.status === 200){
              src = src.response;
              window.chattableStylesheet = src;
              if(ChatUI){
                ChatUI.contentWindow.location.reload();
                ChatUI.addEventListener("load", function(){
                  ChatUI.contentWindow.postMessage(window.chattableStylesheet, "*");
                });
                try {
                  ChatUI.contentWindow.postMessage(window.chattableStylesheet, "*");
                } catch(err){
                  console.warn("The current web page is loading slower than the iframe, but that's okay.");
                }
              } else {
                console.error("Unable to load CSS onto live chat, the chat is not ready.");
              }
              
            } else {
              console.error("Could not locate file. Check the link and try again. " + parameters.stylesheet + ";" + src.status);
              return false;
            }
          }
        };
        src.send(null);
      }
    }
  },
  minimize : function(){
    var ChatUI = chattable.returnFrame();
    var defaultStyle = ChatUI.style.transition;
    chattable.settings.oldHeight = ChatUI.style.height ? ChatUI.style.height : ChatUI.offsetHeight;
    chattable.settings.oldStyle = ChatUI.style;
    
    ChatUI.style.transition = "all 500ms ease-out";
    ChatUI.style.minHeight = "0";
    ChatUI.style.height = "0";
    setTimeout(function(){
      ChatUI.style.transition = defaultStyle;
      chattable.settings.visible = false;
    }, 500);
  },
  maximize : function(){
    var ChatUI = chattable.returnFrame();
    ChatUI.style.transition = "all 500ms ease-out";
    ChatUI.style.height = parseInt(chattable.settings.oldHeight) + "px";
    setTimeout(function(){
      ChatUI.style = chattable.settings.oldStyle;
      chattable.settings.visible = true;
    }, 500);
  },
  changeRoom : function(chat_id){
    var newURL = "https://chattable.neocities.org/embed?chat=" + chat_id;
    chattable.returnFrame().src = newURL;
  },
  api : {
    server : {
      connected: false,
      socket: "Pending...",
      room : {
        id : null,
        messages : null
      }
    },
    connect: function(email, password){
      return new  Promise(function(resolve, reject){
      function login(email, password){
        console.log("Trying ", [email, password]);
        if(email && password){
           firebase.auth().signInWithEmailAndPassword(atob(email), atob(password)).then(function(){
             console.log("You signed in with email and password.");
             postAuth();
           }).catch(function(err){
             reject("There was an issue signing in. " + err.message);
           });
          } else {
           firebase.auth().signInAnonymously().then(function(){
             console.log("You signed in anonymously.");
             postAuth();
           }).catch(function(err){
             reject("There was an issue signing in. " + err.message);
           });
          }
      }
      function postAuth(){
        function postSocketCheck(){
          chattable.api.server.socket = io('https://beta.iframe.chat:3000', {
            secure: true,
            transports: ['websocket', 'polling']
          });
          chattable.api.server.socket.on('connect', function(){
            chattable.api.server.connected = true;
            resolve("Success");
          });
          chattable.api.server.socket.on('disconnect', function(){
            chattable.api.server.connected = false;
            console.log("You were disconnected from the server.");
          });
        }
        if(typeof io !== 'undefined'){
          postSocketCheck();
        } else {
          // install websockets
          let socketSrc = "https://iframe.chat/scripts/socket.io.js";
        var src = new XMLHttpRequest();
        src.open("GET", socketSrc, true);
        src.responseType = "text";
        src.onload = function(){
          if(src.readyState === src.DONE){
            if(src.status === 200){
              let res = src.response;
              var script = document.createElement("SCRIPT");
                script.innerHTML = res;
              document.head.appendChild(script);
              setTimeout(function(){
                postSocketCheck();
              }, 0);
            } else {
            reject("Unable to install Web Sockets, " + res.status);
            return false;
            }
          }
        };
        src.send(null);
        }
      }
      if(typeof firebase !== 'undefined'){
        if(firebase.auth().currentUser){
          console.log("You are already signed in.");
          postAuth();
        } else {
          login(email?email:null, password?password:null);
        }
      } else {
        // install firebase 
        let firebaseSrc = "https://www.gstatic.com/firebasejs/4.8.0/firebase.js";
        var src = new XMLHttpRequest();
        src.open("GET", firebaseSrc, true);
        src.responseType = "text";
        src.onload = function(){
          if(src.readyState === src.DONE){
            if(src.status === 200){
              const firebaseConfig = {
                apiKey: "AIzaSyAX8D8NF0VE2GWVxRxW3UiLeQ2x4z19UxY",
                authDomain: "chattable-api.firebaseapp.com",
                databaseURL: "https://chattable-api-default-rtdb.firebaseio.com/",
                projectId: "chattable-api",
                storageBucket: "chattable-api.appspot.com",
                messagingSenderId: "659338030574",
                appId: "1:659338030574:web:fd234cdae540d6c753b2ff"
              };
              let res = src.response;
              var script = document.createElement("SCRIPT");
                script.innerHTML = res;
              document.head.appendChild(script);
              setTimeout(function(){
                firebase.initializeApp(firebaseConfig);
                login(email?email:null, password?password:null);
              }, 0);
            } else {
            reject("Unable to install Firebase, " + res.status);
            return false;
            }
          }
        };
        src.send(null);
      }
    });
    },
    sendMessage: function(message, room, name){
      if(message && room && name){
        // pass
      } else {
        // fail
        console.warn("Message not sent. You are missing some data. The sendMessage method requires 3 parameters.\n\tmessage,\n\troom,\n\tname\nWhen you call sendMessage it should look like this,\n\nsendMessage(message, room, name);");
        return false;
      }
      if(chattable.api.server.connected){
        firebase.auth().currentUser.getIdToken(true).then(function(data) {
          const token = data;
          const msg = { text: message, name: name };
          var packet = { room, message : { text: message, name: name }, token };
          console.log(packet);
          chattable.api.server.socket.emit("sendMessage", packet);
        }).catch(function(err){
          console.error("Unable to authorize client token.");
        });
      } else {
        console.warn("You must connect to the server first.");
      }
    },
    listen: function(chat, updateCallback){
      if(chat){
        try {
          if(chattable.api.server.room.id){
            firebase.database().ref(`/chats/${chattable.api.server.room.id}`).off("value");
          }
        } catch(err){}
        chattable.api.server.room.id = chat;
        firebase.database().ref(`/chats/${chattable.api.server.room.id}`).on("value", function(data){
          chattable.api.server.room.message = data.val();
          if(updateCallback){
            updateCallback(data.val());
          }
        });
      } else {
        console.warn("To listen for chat updates you need to provide a room ID when you call the listen method, e.g.\n\nlisten('000')");
        return false;
      }
    }
  }
};
window.chattable = chattable;